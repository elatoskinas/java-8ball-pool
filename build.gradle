import com.github.spotbugs.SpotBugsTask

plugins {
    id 'java'
//    id 'eclipse' // optional (to generate Eclipse project files)
//    id 'idea' // optional (to generate IntelliJ IDEA project files)

    // Test coverage
    id 'jacoco'

    // Code style
    id 'checkstyle'

    // PMD
    id 'pmd'

    // FindBugs / SpotBugs
    id "com.github.spotbugs" version "2.0.1"
}

group 'nl.tudelft.cse.sem.pool'
version '1.0-SNAPSHOT'
sourceCompatibility = 12

allprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'

    version = '1.0'
    ext {
        appName = "pool"
        gdxVersion = '1.9.10'
        roboVMVersion = '2.3.7'
        box2DLightsVersion = '1.4'
        ashleyVersion = '1.7.0'
        aiVersion = '1.8.0'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }

    checkstyle {
        toolVersion "8.25"
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    pmd {
        incrementalAnalysis = true
    }

    spotbugs {
        sourceSets = [sourceSets.main]
        ignoreFailures = false
        effort = "default"
        reportLevel = "high"
        visitors = ["FindSqlInjection", "SwitchFallthrough"]
        excludeFilter = file("$rootProject.projectDir/config/spotbugs/excludeFilter.xml")
    }

    tasks.withType(SpotBugsTask) {
        reports.xml.enabled = false
        reports.html.enabled = true
    }

    test {
        useJUnitPlatform()

        jacoco {
            enabled = true
            includes = ['com.sem.pool.*']
            excludes = []
        }

        finalizedBy jacocoTestReport
        finalizedBy jacocoTestCoverageVerification
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                enabled = true
                element = 'CLASS'
                includes = ['com.sem.pool.*']

                limit {
                    counter = 'LINE'
                    value = 'TOTALCOUNT'
                    maximum = 200
                }
            }
        }
    }

    dependencies {
        spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '3.1.0'
        testImplementation('org.junit.jupiter:junit-jupiter:5.5.2')
        // https://mvnrepository.com/artifact/org.mockito/mockito-core
        testCompile group: 'org.mockito', name: 'mockito-core', version: '3.1.0'
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

// LibGDX
project(":desktop") {
    apply plugin: "java-library"

    dependencies {
        implementation project(":core")
        api "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
    }
}

project(":core") {
    apply plugin: "java-library"


    dependencies {
        api "com.badlogicgames.gdx:gdx:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        api "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"
        api "com.badlogicgames.ashley:ashley:$ashleyVersion"
        api "com.badlogicgames.gdx:gdx-ai:$aiVersion"
        testImplementation('org.junit.jupiter:junit-jupiter:5.5.2')
        testCompile group: 'org.mockito', name: 'mockito-core', version: '3.1.0'
    }
}
